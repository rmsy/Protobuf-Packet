// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/test/java/tc/oc/protobuf/packet/protocols/test_generic_message.proto

package tc.oc.protobuf.packet.protocols;

public final class TestGenericMessage {
  private TestGenericMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GenericMessageOrBuilder extends
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<GenericMessage> {

    // repeated double double_value = 1 [packed = true];
    /**
     * <code>repeated double double_value = 1 [packed = true];</code>
     */
    java.util.List<java.lang.Double> getDoubleValueList();
    /**
     * <code>repeated double double_value = 1 [packed = true];</code>
     */
    int getDoubleValueCount();
    /**
     * <code>repeated double double_value = 1 [packed = true];</code>
     */
    double getDoubleValue(int index);

    // repeated float float_value = 2 [packed = true];
    /**
     * <code>repeated float float_value = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getFloatValueList();
    /**
     * <code>repeated float float_value = 2 [packed = true];</code>
     */
    int getFloatValueCount();
    /**
     * <code>repeated float float_value = 2 [packed = true];</code>
     */
    float getFloatValue(int index);

    // repeated int32 integer32_value = 3 [packed = true];
    /**
     * <code>repeated int32 integer32_value = 3 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getInteger32ValueList();
    /**
     * <code>repeated int32 integer32_value = 3 [packed = true];</code>
     */
    int getInteger32ValueCount();
    /**
     * <code>repeated int32 integer32_value = 3 [packed = true];</code>
     */
    int getInteger32Value(int index);

    // repeated int64 integer64_value = 4 [packed = true];
    /**
     * <code>repeated int64 integer64_value = 4 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getInteger64ValueList();
    /**
     * <code>repeated int64 integer64_value = 4 [packed = true];</code>
     */
    int getInteger64ValueCount();
    /**
     * <code>repeated int64 integer64_value = 4 [packed = true];</code>
     */
    long getInteger64Value(int index);

    // repeated uint32 unsigned_integer32_value = 5 [packed = true];
    /**
     * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getUnsignedInteger32ValueList();
    /**
     * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
     */
    int getUnsignedInteger32ValueCount();
    /**
     * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
     */
    int getUnsignedInteger32Value(int index);

    // repeated uint64 unsigned_integer64_value = 6 [packed = true];
    /**
     * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getUnsignedInteger64ValueList();
    /**
     * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
     */
    int getUnsignedInteger64ValueCount();
    /**
     * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
     */
    long getUnsignedInteger64Value(int index);

    // repeated sint32 signed_integer32_value = 7 [packed = true];
    /**
     * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getSignedInteger32ValueList();
    /**
     * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
     */
    int getSignedInteger32ValueCount();
    /**
     * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
     */
    int getSignedInteger32Value(int index);

    // repeated sint64 signed_integer64_value = 8 [packed = true];
    /**
     * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getSignedInteger64ValueList();
    /**
     * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
     */
    int getSignedInteger64ValueCount();
    /**
     * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
     */
    long getSignedInteger64Value(int index);

    // repeated fixed32 fixed_number32_value = 9 [packed = true];
    /**
     * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getFixedNumber32ValueList();
    /**
     * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
     */
    int getFixedNumber32ValueCount();
    /**
     * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
     */
    int getFixedNumber32Value(int index);

    // repeated fixed64 fixed_number64_value = 10 [packed = true];
    /**
     * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getFixedNumber64ValueList();
    /**
     * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
     */
    int getFixedNumber64ValueCount();
    /**
     * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
     */
    long getFixedNumber64Value(int index);

    // repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];
    /**
     * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getSignedFixedNumber32ValueList();
    /**
     * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
     */
    int getSignedFixedNumber32ValueCount();
    /**
     * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
     */
    int getSignedFixedNumber32Value(int index);

    // repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];
    /**
     * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getSignedFixedNumber64ValueList();
    /**
     * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
     */
    int getSignedFixedNumber64ValueCount();
    /**
     * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
     */
    long getSignedFixedNumber64Value(int index);

    // repeated bool boolean_value = 13;
    /**
     * <code>repeated bool boolean_value = 13;</code>
     */
    java.util.List<java.lang.Boolean> getBooleanValueList();
    /**
     * <code>repeated bool boolean_value = 13;</code>
     */
    int getBooleanValueCount();
    /**
     * <code>repeated bool boolean_value = 13;</code>
     */
    boolean getBooleanValue(int index);

    // repeated string string_value = 14;
    /**
     * <code>repeated string string_value = 14;</code>
     */
    java.util.List<java.lang.String>
    getStringValueList();
    /**
     * <code>repeated string string_value = 14;</code>
     */
    int getStringValueCount();
    /**
     * <code>repeated string string_value = 14;</code>
     */
    java.lang.String getStringValue(int index);
    /**
     * <code>repeated string string_value = 14;</code>
     */
    com.google.protobuf.ByteString
        getStringValueBytes(int index);

    // repeated bytes byte_sequence_value = 15;
    /**
     * <code>repeated bytes byte_sequence_value = 15;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getByteSequenceValueList();
    /**
     * <code>repeated bytes byte_sequence_value = 15;</code>
     */
    int getByteSequenceValueCount();
    /**
     * <code>repeated bytes byte_sequence_value = 15;</code>
     */
    com.google.protobuf.ByteString getByteSequenceValue(int index);
  }
  /**
   * Protobuf type {@code tc.oc.protobuf.packet.protocols.GenericMessage}
   */
  public static final class GenericMessage extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        GenericMessage> implements GenericMessageOrBuilder {
    // Use GenericMessage.newBuilder() to construct.
    private GenericMessage(com.google.protobuf.GeneratedMessage.ExtendableBuilder<tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GenericMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GenericMessage defaultInstance;
    public static GenericMessage getDefaultInstance() {
      return defaultInstance;
    }

    public GenericMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GenericMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                doubleValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              doubleValue_.add(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                doubleValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleValue_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                floatValue_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              floatValue_.add(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                floatValue_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                floatValue_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                integer32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              integer32Value_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                integer32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                integer32Value_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                integer64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              integer64Value_.add(input.readInt64());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                integer64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                integer64Value_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                unsignedInteger32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              unsignedInteger32Value_.add(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                unsignedInteger32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                unsignedInteger32Value_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                unsignedInteger64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000020;
              }
              unsignedInteger64Value_.add(input.readUInt64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                unsignedInteger64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                unsignedInteger64Value_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                signedInteger32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              signedInteger32Value_.add(input.readSInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                signedInteger32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                signedInteger32Value_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                signedInteger64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              signedInteger64Value_.add(input.readSInt64());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                signedInteger64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                signedInteger64Value_.add(input.readSInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 77: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                fixedNumber32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              fixedNumber32Value_.add(input.readFixed32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                fixedNumber32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                fixedNumber32Value_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 81: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                fixedNumber64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000200;
              }
              fixedNumber64Value_.add(input.readFixed64());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                fixedNumber64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                fixedNumber64Value_.add(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 93: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                signedFixedNumber32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              signedFixedNumber32Value_.add(input.readSFixed32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                signedFixedNumber32Value_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                signedFixedNumber32Value_.add(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 97: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                signedFixedNumber64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000800;
              }
              signedFixedNumber64Value_.add(input.readSFixed64());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                signedFixedNumber64Value_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                signedFixedNumber64Value_.add(input.readSFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                booleanValue_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00001000;
              }
              booleanValue_.add(input.readBool());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                booleanValue_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                booleanValue_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                stringValue_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00002000;
              }
              stringValue_.add(input.readBytes());
              break;
            }
            case 122: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                byteSequenceValue_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00004000;
              }
              byteSequenceValue_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          doubleValue_ = java.util.Collections.unmodifiableList(doubleValue_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          floatValue_ = java.util.Collections.unmodifiableList(floatValue_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          integer32Value_ = java.util.Collections.unmodifiableList(integer32Value_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          integer64Value_ = java.util.Collections.unmodifiableList(integer64Value_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          unsignedInteger32Value_ = java.util.Collections.unmodifiableList(unsignedInteger32Value_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          unsignedInteger64Value_ = java.util.Collections.unmodifiableList(unsignedInteger64Value_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          signedInteger32Value_ = java.util.Collections.unmodifiableList(signedInteger32Value_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          signedInteger64Value_ = java.util.Collections.unmodifiableList(signedInteger64Value_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          fixedNumber32Value_ = java.util.Collections.unmodifiableList(fixedNumber32Value_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          fixedNumber64Value_ = java.util.Collections.unmodifiableList(fixedNumber64Value_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          signedFixedNumber32Value_ = java.util.Collections.unmodifiableList(signedFixedNumber32Value_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          signedFixedNumber64Value_ = java.util.Collections.unmodifiableList(signedFixedNumber64Value_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          booleanValue_ = java.util.Collections.unmodifiableList(booleanValue_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          stringValue_ = new com.google.protobuf.UnmodifiableLazyStringList(stringValue_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          byteSequenceValue_ = java.util.Collections.unmodifiableList(byteSequenceValue_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return tc.oc.protobuf.packet.protocols.TestGenericMessage.internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return tc.oc.protobuf.packet.protocols.TestGenericMessage.internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.class, tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<GenericMessage> PARSER =
        new com.google.protobuf.AbstractParser<GenericMessage>() {
      public GenericMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GenericMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GenericMessage> getParserForType() {
      return PARSER;
    }

    // repeated double double_value = 1 [packed = true];
    public static final int DOUBLE_VALUE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Double> doubleValue_;
    /**
     * <code>repeated double double_value = 1 [packed = true];</code>
     */
    public java.util.List<java.lang.Double>
        getDoubleValueList() {
      return doubleValue_;
    }
    /**
     * <code>repeated double double_value = 1 [packed = true];</code>
     */
    public int getDoubleValueCount() {
      return doubleValue_.size();
    }
    /**
     * <code>repeated double double_value = 1 [packed = true];</code>
     */
    public double getDoubleValue(int index) {
      return doubleValue_.get(index);
    }
    private int doubleValueMemoizedSerializedSize = -1;

    // repeated float float_value = 2 [packed = true];
    public static final int FLOAT_VALUE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Float> floatValue_;
    /**
     * <code>repeated float float_value = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getFloatValueList() {
      return floatValue_;
    }
    /**
     * <code>repeated float float_value = 2 [packed = true];</code>
     */
    public int getFloatValueCount() {
      return floatValue_.size();
    }
    /**
     * <code>repeated float float_value = 2 [packed = true];</code>
     */
    public float getFloatValue(int index) {
      return floatValue_.get(index);
    }
    private int floatValueMemoizedSerializedSize = -1;

    // repeated int32 integer32_value = 3 [packed = true];
    public static final int INTEGER32_VALUE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> integer32Value_;
    /**
     * <code>repeated int32 integer32_value = 3 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getInteger32ValueList() {
      return integer32Value_;
    }
    /**
     * <code>repeated int32 integer32_value = 3 [packed = true];</code>
     */
    public int getInteger32ValueCount() {
      return integer32Value_.size();
    }
    /**
     * <code>repeated int32 integer32_value = 3 [packed = true];</code>
     */
    public int getInteger32Value(int index) {
      return integer32Value_.get(index);
    }
    private int integer32ValueMemoizedSerializedSize = -1;

    // repeated int64 integer64_value = 4 [packed = true];
    public static final int INTEGER64_VALUE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Long> integer64Value_;
    /**
     * <code>repeated int64 integer64_value = 4 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getInteger64ValueList() {
      return integer64Value_;
    }
    /**
     * <code>repeated int64 integer64_value = 4 [packed = true];</code>
     */
    public int getInteger64ValueCount() {
      return integer64Value_.size();
    }
    /**
     * <code>repeated int64 integer64_value = 4 [packed = true];</code>
     */
    public long getInteger64Value(int index) {
      return integer64Value_.get(index);
    }
    private int integer64ValueMemoizedSerializedSize = -1;

    // repeated uint32 unsigned_integer32_value = 5 [packed = true];
    public static final int UNSIGNED_INTEGER32_VALUE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> unsignedInteger32Value_;
    /**
     * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getUnsignedInteger32ValueList() {
      return unsignedInteger32Value_;
    }
    /**
     * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
     */
    public int getUnsignedInteger32ValueCount() {
      return unsignedInteger32Value_.size();
    }
    /**
     * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
     */
    public int getUnsignedInteger32Value(int index) {
      return unsignedInteger32Value_.get(index);
    }
    private int unsignedInteger32ValueMemoizedSerializedSize = -1;

    // repeated uint64 unsigned_integer64_value = 6 [packed = true];
    public static final int UNSIGNED_INTEGER64_VALUE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Long> unsignedInteger64Value_;
    /**
     * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getUnsignedInteger64ValueList() {
      return unsignedInteger64Value_;
    }
    /**
     * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
     */
    public int getUnsignedInteger64ValueCount() {
      return unsignedInteger64Value_.size();
    }
    /**
     * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
     */
    public long getUnsignedInteger64Value(int index) {
      return unsignedInteger64Value_.get(index);
    }
    private int unsignedInteger64ValueMemoizedSerializedSize = -1;

    // repeated sint32 signed_integer32_value = 7 [packed = true];
    public static final int SIGNED_INTEGER32_VALUE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> signedInteger32Value_;
    /**
     * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getSignedInteger32ValueList() {
      return signedInteger32Value_;
    }
    /**
     * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
     */
    public int getSignedInteger32ValueCount() {
      return signedInteger32Value_.size();
    }
    /**
     * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
     */
    public int getSignedInteger32Value(int index) {
      return signedInteger32Value_.get(index);
    }
    private int signedInteger32ValueMemoizedSerializedSize = -1;

    // repeated sint64 signed_integer64_value = 8 [packed = true];
    public static final int SIGNED_INTEGER64_VALUE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Long> signedInteger64Value_;
    /**
     * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getSignedInteger64ValueList() {
      return signedInteger64Value_;
    }
    /**
     * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
     */
    public int getSignedInteger64ValueCount() {
      return signedInteger64Value_.size();
    }
    /**
     * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
     */
    public long getSignedInteger64Value(int index) {
      return signedInteger64Value_.get(index);
    }
    private int signedInteger64ValueMemoizedSerializedSize = -1;

    // repeated fixed32 fixed_number32_value = 9 [packed = true];
    public static final int FIXED_NUMBER32_VALUE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> fixedNumber32Value_;
    /**
     * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getFixedNumber32ValueList() {
      return fixedNumber32Value_;
    }
    /**
     * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
     */
    public int getFixedNumber32ValueCount() {
      return fixedNumber32Value_.size();
    }
    /**
     * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
     */
    public int getFixedNumber32Value(int index) {
      return fixedNumber32Value_.get(index);
    }
    private int fixedNumber32ValueMemoizedSerializedSize = -1;

    // repeated fixed64 fixed_number64_value = 10 [packed = true];
    public static final int FIXED_NUMBER64_VALUE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Long> fixedNumber64Value_;
    /**
     * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getFixedNumber64ValueList() {
      return fixedNumber64Value_;
    }
    /**
     * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
     */
    public int getFixedNumber64ValueCount() {
      return fixedNumber64Value_.size();
    }
    /**
     * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
     */
    public long getFixedNumber64Value(int index) {
      return fixedNumber64Value_.get(index);
    }
    private int fixedNumber64ValueMemoizedSerializedSize = -1;

    // repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];
    public static final int SIGNED_FIXED_NUMBER32_VALUE_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> signedFixedNumber32Value_;
    /**
     * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getSignedFixedNumber32ValueList() {
      return signedFixedNumber32Value_;
    }
    /**
     * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
     */
    public int getSignedFixedNumber32ValueCount() {
      return signedFixedNumber32Value_.size();
    }
    /**
     * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
     */
    public int getSignedFixedNumber32Value(int index) {
      return signedFixedNumber32Value_.get(index);
    }
    private int signedFixedNumber32ValueMemoizedSerializedSize = -1;

    // repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];
    public static final int SIGNED_FIXED_NUMBER64_VALUE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Long> signedFixedNumber64Value_;
    /**
     * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getSignedFixedNumber64ValueList() {
      return signedFixedNumber64Value_;
    }
    /**
     * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
     */
    public int getSignedFixedNumber64ValueCount() {
      return signedFixedNumber64Value_.size();
    }
    /**
     * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
     */
    public long getSignedFixedNumber64Value(int index) {
      return signedFixedNumber64Value_.get(index);
    }
    private int signedFixedNumber64ValueMemoizedSerializedSize = -1;

    // repeated bool boolean_value = 13;
    public static final int BOOLEAN_VALUE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Boolean> booleanValue_;
    /**
     * <code>repeated bool boolean_value = 13;</code>
     */
    public java.util.List<java.lang.Boolean>
        getBooleanValueList() {
      return booleanValue_;
    }
    /**
     * <code>repeated bool boolean_value = 13;</code>
     */
    public int getBooleanValueCount() {
      return booleanValue_.size();
    }
    /**
     * <code>repeated bool boolean_value = 13;</code>
     */
    public boolean getBooleanValue(int index) {
      return booleanValue_.get(index);
    }

    // repeated string string_value = 14;
    public static final int STRING_VALUE_FIELD_NUMBER = 14;
    private com.google.protobuf.LazyStringList stringValue_;
    /**
     * <code>repeated string string_value = 14;</code>
     */
    public java.util.List<java.lang.String>
        getStringValueList() {
      return stringValue_;
    }
    /**
     * <code>repeated string string_value = 14;</code>
     */
    public int getStringValueCount() {
      return stringValue_.size();
    }
    /**
     * <code>repeated string string_value = 14;</code>
     */
    public java.lang.String getStringValue(int index) {
      return stringValue_.get(index);
    }
    /**
     * <code>repeated string string_value = 14;</code>
     */
    public com.google.protobuf.ByteString
        getStringValueBytes(int index) {
      return stringValue_.getByteString(index);
    }

    // repeated bytes byte_sequence_value = 15;
    public static final int BYTE_SEQUENCE_VALUE_FIELD_NUMBER = 15;
    private java.util.List<com.google.protobuf.ByteString> byteSequenceValue_;
    /**
     * <code>repeated bytes byte_sequence_value = 15;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getByteSequenceValueList() {
      return byteSequenceValue_;
    }
    /**
     * <code>repeated bytes byte_sequence_value = 15;</code>
     */
    public int getByteSequenceValueCount() {
      return byteSequenceValue_.size();
    }
    /**
     * <code>repeated bytes byte_sequence_value = 15;</code>
     */
    public com.google.protobuf.ByteString getByteSequenceValue(int index) {
      return byteSequenceValue_.get(index);
    }

    private void initFields() {
      doubleValue_ = java.util.Collections.emptyList();
      floatValue_ = java.util.Collections.emptyList();
      integer32Value_ = java.util.Collections.emptyList();
      integer64Value_ = java.util.Collections.emptyList();
      unsignedInteger32Value_ = java.util.Collections.emptyList();
      unsignedInteger64Value_ = java.util.Collections.emptyList();
      signedInteger32Value_ = java.util.Collections.emptyList();
      signedInteger64Value_ = java.util.Collections.emptyList();
      fixedNumber32Value_ = java.util.Collections.emptyList();
      fixedNumber64Value_ = java.util.Collections.emptyList();
      signedFixedNumber32Value_ = java.util.Collections.emptyList();
      signedFixedNumber64Value_ = java.util.Collections.emptyList();
      booleanValue_ = java.util.Collections.emptyList();
      stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      byteSequenceValue_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (getDoubleValueList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(doubleValueMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleValue_.size(); i++) {
        output.writeDoubleNoTag(doubleValue_.get(i));
      }
      if (getFloatValueList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(floatValueMemoizedSerializedSize);
      }
      for (int i = 0; i < floatValue_.size(); i++) {
        output.writeFloatNoTag(floatValue_.get(i));
      }
      if (getInteger32ValueList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(integer32ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < integer32Value_.size(); i++) {
        output.writeInt32NoTag(integer32Value_.get(i));
      }
      if (getInteger64ValueList().size() > 0) {
        output.writeRawVarint32(34);
        output.writeRawVarint32(integer64ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < integer64Value_.size(); i++) {
        output.writeInt64NoTag(integer64Value_.get(i));
      }
      if (getUnsignedInteger32ValueList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(unsignedInteger32ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < unsignedInteger32Value_.size(); i++) {
        output.writeUInt32NoTag(unsignedInteger32Value_.get(i));
      }
      if (getUnsignedInteger64ValueList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(unsignedInteger64ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < unsignedInteger64Value_.size(); i++) {
        output.writeUInt64NoTag(unsignedInteger64Value_.get(i));
      }
      if (getSignedInteger32ValueList().size() > 0) {
        output.writeRawVarint32(58);
        output.writeRawVarint32(signedInteger32ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < signedInteger32Value_.size(); i++) {
        output.writeSInt32NoTag(signedInteger32Value_.get(i));
      }
      if (getSignedInteger64ValueList().size() > 0) {
        output.writeRawVarint32(66);
        output.writeRawVarint32(signedInteger64ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < signedInteger64Value_.size(); i++) {
        output.writeSInt64NoTag(signedInteger64Value_.get(i));
      }
      if (getFixedNumber32ValueList().size() > 0) {
        output.writeRawVarint32(74);
        output.writeRawVarint32(fixedNumber32ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < fixedNumber32Value_.size(); i++) {
        output.writeFixed32NoTag(fixedNumber32Value_.get(i));
      }
      if (getFixedNumber64ValueList().size() > 0) {
        output.writeRawVarint32(82);
        output.writeRawVarint32(fixedNumber64ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < fixedNumber64Value_.size(); i++) {
        output.writeFixed64NoTag(fixedNumber64Value_.get(i));
      }
      if (getSignedFixedNumber32ValueList().size() > 0) {
        output.writeRawVarint32(90);
        output.writeRawVarint32(signedFixedNumber32ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < signedFixedNumber32Value_.size(); i++) {
        output.writeSFixed32NoTag(signedFixedNumber32Value_.get(i));
      }
      if (getSignedFixedNumber64ValueList().size() > 0) {
        output.writeRawVarint32(98);
        output.writeRawVarint32(signedFixedNumber64ValueMemoizedSerializedSize);
      }
      for (int i = 0; i < signedFixedNumber64Value_.size(); i++) {
        output.writeSFixed64NoTag(signedFixedNumber64Value_.get(i));
      }
      for (int i = 0; i < booleanValue_.size(); i++) {
        output.writeBool(13, booleanValue_.get(i));
      }
      for (int i = 0; i < stringValue_.size(); i++) {
        output.writeBytes(14, stringValue_.getByteString(i));
      }
      for (int i = 0; i < byteSequenceValue_.size(); i++) {
        output.writeBytes(15, byteSequenceValue_.get(i));
      }
      extensionWriter.writeUntil(536870912, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleValueList().size();
        size += dataSize;
        if (!getDoubleValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatValueList().size();
        size += dataSize;
        if (!getFloatValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        floatValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < integer32Value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(integer32Value_.get(i));
        }
        size += dataSize;
        if (!getInteger32ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        integer32ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < integer64Value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(integer64Value_.get(i));
        }
        size += dataSize;
        if (!getInteger64ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        integer64ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < unsignedInteger32Value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(unsignedInteger32Value_.get(i));
        }
        size += dataSize;
        if (!getUnsignedInteger32ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        unsignedInteger32ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < unsignedInteger64Value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(unsignedInteger64Value_.get(i));
        }
        size += dataSize;
        if (!getUnsignedInteger64ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        unsignedInteger64ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < signedInteger32Value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(signedInteger32Value_.get(i));
        }
        size += dataSize;
        if (!getSignedInteger32ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        signedInteger32ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < signedInteger64Value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(signedInteger64Value_.get(i));
        }
        size += dataSize;
        if (!getSignedInteger64ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        signedInteger64ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFixedNumber32ValueList().size();
        size += dataSize;
        if (!getFixedNumber32ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        fixedNumber32ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getFixedNumber64ValueList().size();
        size += dataSize;
        if (!getFixedNumber64ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        fixedNumber64ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSignedFixedNumber32ValueList().size();
        size += dataSize;
        if (!getSignedFixedNumber32ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        signedFixedNumber32ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSignedFixedNumber64ValueList().size();
        size += dataSize;
        if (!getSignedFixedNumber64ValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        signedFixedNumber64ValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 1 * getBooleanValueList().size();
        size += dataSize;
        size += 1 * getBooleanValueList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stringValue_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getStringValueList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < byteSequenceValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(byteSequenceValue_.get(i));
        }
        size += dataSize;
        size += 1 * getByteSequenceValueList().size();
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code tc.oc.protobuf.packet.protocols.GenericMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage, Builder> implements tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return tc.oc.protobuf.packet.protocols.TestGenericMessage.internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return tc.oc.protobuf.packet.protocols.TestGenericMessage.internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.class, tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.Builder.class);
      }

      // Construct using tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        doubleValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        floatValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        integer32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        integer64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        unsignedInteger32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        unsignedInteger64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        signedInteger32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        signedInteger64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        fixedNumber32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        fixedNumber64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        signedFixedNumber32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        signedFixedNumber64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        booleanValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        byteSequenceValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return tc.oc.protobuf.packet.protocols.TestGenericMessage.internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_descriptor;
      }

      public tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage getDefaultInstanceForType() {
        return tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.getDefaultInstance();
      }

      public tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage build() {
        tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage buildPartial() {
        tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage result = new tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          doubleValue_ = java.util.Collections.unmodifiableList(doubleValue_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.doubleValue_ = doubleValue_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          floatValue_ = java.util.Collections.unmodifiableList(floatValue_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.floatValue_ = floatValue_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          integer32Value_ = java.util.Collections.unmodifiableList(integer32Value_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.integer32Value_ = integer32Value_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          integer64Value_ = java.util.Collections.unmodifiableList(integer64Value_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.integer64Value_ = integer64Value_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          unsignedInteger32Value_ = java.util.Collections.unmodifiableList(unsignedInteger32Value_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.unsignedInteger32Value_ = unsignedInteger32Value_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          unsignedInteger64Value_ = java.util.Collections.unmodifiableList(unsignedInteger64Value_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.unsignedInteger64Value_ = unsignedInteger64Value_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          signedInteger32Value_ = java.util.Collections.unmodifiableList(signedInteger32Value_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.signedInteger32Value_ = signedInteger32Value_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          signedInteger64Value_ = java.util.Collections.unmodifiableList(signedInteger64Value_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.signedInteger64Value_ = signedInteger64Value_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          fixedNumber32Value_ = java.util.Collections.unmodifiableList(fixedNumber32Value_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.fixedNumber32Value_ = fixedNumber32Value_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          fixedNumber64Value_ = java.util.Collections.unmodifiableList(fixedNumber64Value_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.fixedNumber64Value_ = fixedNumber64Value_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          signedFixedNumber32Value_ = java.util.Collections.unmodifiableList(signedFixedNumber32Value_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.signedFixedNumber32Value_ = signedFixedNumber32Value_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          signedFixedNumber64Value_ = java.util.Collections.unmodifiableList(signedFixedNumber64Value_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.signedFixedNumber64Value_ = signedFixedNumber64Value_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          booleanValue_ = java.util.Collections.unmodifiableList(booleanValue_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.booleanValue_ = booleanValue_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          stringValue_ = new com.google.protobuf.UnmodifiableLazyStringList(
              stringValue_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.stringValue_ = stringValue_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          byteSequenceValue_ = java.util.Collections.unmodifiableList(byteSequenceValue_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.byteSequenceValue_ = byteSequenceValue_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage) {
          return mergeFrom((tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage other) {
        if (other == tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage.getDefaultInstance()) return this;
        if (!other.doubleValue_.isEmpty()) {
          if (doubleValue_.isEmpty()) {
            doubleValue_ = other.doubleValue_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDoubleValueIsMutable();
            doubleValue_.addAll(other.doubleValue_);
          }
          onChanged();
        }
        if (!other.floatValue_.isEmpty()) {
          if (floatValue_.isEmpty()) {
            floatValue_ = other.floatValue_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureFloatValueIsMutable();
            floatValue_.addAll(other.floatValue_);
          }
          onChanged();
        }
        if (!other.integer32Value_.isEmpty()) {
          if (integer32Value_.isEmpty()) {
            integer32Value_ = other.integer32Value_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInteger32ValueIsMutable();
            integer32Value_.addAll(other.integer32Value_);
          }
          onChanged();
        }
        if (!other.integer64Value_.isEmpty()) {
          if (integer64Value_.isEmpty()) {
            integer64Value_ = other.integer64Value_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInteger64ValueIsMutable();
            integer64Value_.addAll(other.integer64Value_);
          }
          onChanged();
        }
        if (!other.unsignedInteger32Value_.isEmpty()) {
          if (unsignedInteger32Value_.isEmpty()) {
            unsignedInteger32Value_ = other.unsignedInteger32Value_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureUnsignedInteger32ValueIsMutable();
            unsignedInteger32Value_.addAll(other.unsignedInteger32Value_);
          }
          onChanged();
        }
        if (!other.unsignedInteger64Value_.isEmpty()) {
          if (unsignedInteger64Value_.isEmpty()) {
            unsignedInteger64Value_ = other.unsignedInteger64Value_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureUnsignedInteger64ValueIsMutable();
            unsignedInteger64Value_.addAll(other.unsignedInteger64Value_);
          }
          onChanged();
        }
        if (!other.signedInteger32Value_.isEmpty()) {
          if (signedInteger32Value_.isEmpty()) {
            signedInteger32Value_ = other.signedInteger32Value_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureSignedInteger32ValueIsMutable();
            signedInteger32Value_.addAll(other.signedInteger32Value_);
          }
          onChanged();
        }
        if (!other.signedInteger64Value_.isEmpty()) {
          if (signedInteger64Value_.isEmpty()) {
            signedInteger64Value_ = other.signedInteger64Value_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureSignedInteger64ValueIsMutable();
            signedInteger64Value_.addAll(other.signedInteger64Value_);
          }
          onChanged();
        }
        if (!other.fixedNumber32Value_.isEmpty()) {
          if (fixedNumber32Value_.isEmpty()) {
            fixedNumber32Value_ = other.fixedNumber32Value_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureFixedNumber32ValueIsMutable();
            fixedNumber32Value_.addAll(other.fixedNumber32Value_);
          }
          onChanged();
        }
        if (!other.fixedNumber64Value_.isEmpty()) {
          if (fixedNumber64Value_.isEmpty()) {
            fixedNumber64Value_ = other.fixedNumber64Value_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureFixedNumber64ValueIsMutable();
            fixedNumber64Value_.addAll(other.fixedNumber64Value_);
          }
          onChanged();
        }
        if (!other.signedFixedNumber32Value_.isEmpty()) {
          if (signedFixedNumber32Value_.isEmpty()) {
            signedFixedNumber32Value_ = other.signedFixedNumber32Value_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureSignedFixedNumber32ValueIsMutable();
            signedFixedNumber32Value_.addAll(other.signedFixedNumber32Value_);
          }
          onChanged();
        }
        if (!other.signedFixedNumber64Value_.isEmpty()) {
          if (signedFixedNumber64Value_.isEmpty()) {
            signedFixedNumber64Value_ = other.signedFixedNumber64Value_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureSignedFixedNumber64ValueIsMutable();
            signedFixedNumber64Value_.addAll(other.signedFixedNumber64Value_);
          }
          onChanged();
        }
        if (!other.booleanValue_.isEmpty()) {
          if (booleanValue_.isEmpty()) {
            booleanValue_ = other.booleanValue_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureBooleanValueIsMutable();
            booleanValue_.addAll(other.booleanValue_);
          }
          onChanged();
        }
        if (!other.stringValue_.isEmpty()) {
          if (stringValue_.isEmpty()) {
            stringValue_ = other.stringValue_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureStringValueIsMutable();
            stringValue_.addAll(other.stringValue_);
          }
          onChanged();
        }
        if (!other.byteSequenceValue_.isEmpty()) {
          if (byteSequenceValue_.isEmpty()) {
            byteSequenceValue_ = other.byteSequenceValue_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureByteSequenceValueIsMutable();
            byteSequenceValue_.addAll(other.byteSequenceValue_);
          }
          onChanged();
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (tc.oc.protobuf.packet.protocols.TestGenericMessage.GenericMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated double double_value = 1 [packed = true];
      private java.util.List<java.lang.Double> doubleValue_ = java.util.Collections.emptyList();
      private void ensureDoubleValueIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          doubleValue_ = new java.util.ArrayList<java.lang.Double>(doubleValue_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public java.util.List<java.lang.Double>
          getDoubleValueList() {
        return java.util.Collections.unmodifiableList(doubleValue_);
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public int getDoubleValueCount() {
        return doubleValue_.size();
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public double getDoubleValue(int index) {
        return doubleValue_.get(index);
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public Builder setDoubleValue(
          int index, double value) {
        ensureDoubleValueIsMutable();
        doubleValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public Builder addDoubleValue(double value) {
        ensureDoubleValueIsMutable();
        doubleValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public Builder addAllDoubleValue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleValueIsMutable();
        super.addAll(values, doubleValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double double_value = 1 [packed = true];</code>
       */
      public Builder clearDoubleValue() {
        doubleValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated float float_value = 2 [packed = true];
      private java.util.List<java.lang.Float> floatValue_ = java.util.Collections.emptyList();
      private void ensureFloatValueIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          floatValue_ = new java.util.ArrayList<java.lang.Float>(floatValue_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getFloatValueList() {
        return java.util.Collections.unmodifiableList(floatValue_);
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public int getFloatValueCount() {
        return floatValue_.size();
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public float getFloatValue(int index) {
        return floatValue_.get(index);
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public Builder setFloatValue(
          int index, float value) {
        ensureFloatValueIsMutable();
        floatValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public Builder addFloatValue(float value) {
        ensureFloatValueIsMutable();
        floatValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public Builder addAllFloatValue(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatValueIsMutable();
        super.addAll(values, floatValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_value = 2 [packed = true];</code>
       */
      public Builder clearFloatValue() {
        floatValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 integer32_value = 3 [packed = true];
      private java.util.List<java.lang.Integer> integer32Value_ = java.util.Collections.emptyList();
      private void ensureInteger32ValueIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          integer32Value_ = new java.util.ArrayList<java.lang.Integer>(integer32Value_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getInteger32ValueList() {
        return java.util.Collections.unmodifiableList(integer32Value_);
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public int getInteger32ValueCount() {
        return integer32Value_.size();
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public int getInteger32Value(int index) {
        return integer32Value_.get(index);
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public Builder setInteger32Value(
          int index, int value) {
        ensureInteger32ValueIsMutable();
        integer32Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public Builder addInteger32Value(int value) {
        ensureInteger32ValueIsMutable();
        integer32Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public Builder addAllInteger32Value(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInteger32ValueIsMutable();
        super.addAll(values, integer32Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 integer32_value = 3 [packed = true];</code>
       */
      public Builder clearInteger32Value() {
        integer32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int64 integer64_value = 4 [packed = true];
      private java.util.List<java.lang.Long> integer64Value_ = java.util.Collections.emptyList();
      private void ensureInteger64ValueIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          integer64Value_ = new java.util.ArrayList<java.lang.Long>(integer64Value_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getInteger64ValueList() {
        return java.util.Collections.unmodifiableList(integer64Value_);
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public int getInteger64ValueCount() {
        return integer64Value_.size();
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public long getInteger64Value(int index) {
        return integer64Value_.get(index);
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public Builder setInteger64Value(
          int index, long value) {
        ensureInteger64ValueIsMutable();
        integer64Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public Builder addInteger64Value(long value) {
        ensureInteger64ValueIsMutable();
        integer64Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public Builder addAllInteger64Value(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureInteger64ValueIsMutable();
        super.addAll(values, integer64Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 integer64_value = 4 [packed = true];</code>
       */
      public Builder clearInteger64Value() {
        integer64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated uint32 unsigned_integer32_value = 5 [packed = true];
      private java.util.List<java.lang.Integer> unsignedInteger32Value_ = java.util.Collections.emptyList();
      private void ensureUnsignedInteger32ValueIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          unsignedInteger32Value_ = new java.util.ArrayList<java.lang.Integer>(unsignedInteger32Value_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getUnsignedInteger32ValueList() {
        return java.util.Collections.unmodifiableList(unsignedInteger32Value_);
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public int getUnsignedInteger32ValueCount() {
        return unsignedInteger32Value_.size();
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public int getUnsignedInteger32Value(int index) {
        return unsignedInteger32Value_.get(index);
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public Builder setUnsignedInteger32Value(
          int index, int value) {
        ensureUnsignedInteger32ValueIsMutable();
        unsignedInteger32Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public Builder addUnsignedInteger32Value(int value) {
        ensureUnsignedInteger32ValueIsMutable();
        unsignedInteger32Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public Builder addAllUnsignedInteger32Value(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUnsignedInteger32ValueIsMutable();
        super.addAll(values, unsignedInteger32Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 unsigned_integer32_value = 5 [packed = true];</code>
       */
      public Builder clearUnsignedInteger32Value() {
        unsignedInteger32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated uint64 unsigned_integer64_value = 6 [packed = true];
      private java.util.List<java.lang.Long> unsignedInteger64Value_ = java.util.Collections.emptyList();
      private void ensureUnsignedInteger64ValueIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          unsignedInteger64Value_ = new java.util.ArrayList<java.lang.Long>(unsignedInteger64Value_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getUnsignedInteger64ValueList() {
        return java.util.Collections.unmodifiableList(unsignedInteger64Value_);
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public int getUnsignedInteger64ValueCount() {
        return unsignedInteger64Value_.size();
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public long getUnsignedInteger64Value(int index) {
        return unsignedInteger64Value_.get(index);
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public Builder setUnsignedInteger64Value(
          int index, long value) {
        ensureUnsignedInteger64ValueIsMutable();
        unsignedInteger64Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public Builder addUnsignedInteger64Value(long value) {
        ensureUnsignedInteger64ValueIsMutable();
        unsignedInteger64Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public Builder addAllUnsignedInteger64Value(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureUnsignedInteger64ValueIsMutable();
        super.addAll(values, unsignedInteger64Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 unsigned_integer64_value = 6 [packed = true];</code>
       */
      public Builder clearUnsignedInteger64Value() {
        unsignedInteger64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated sint32 signed_integer32_value = 7 [packed = true];
      private java.util.List<java.lang.Integer> signedInteger32Value_ = java.util.Collections.emptyList();
      private void ensureSignedInteger32ValueIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          signedInteger32Value_ = new java.util.ArrayList<java.lang.Integer>(signedInteger32Value_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getSignedInteger32ValueList() {
        return java.util.Collections.unmodifiableList(signedInteger32Value_);
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public int getSignedInteger32ValueCount() {
        return signedInteger32Value_.size();
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public int getSignedInteger32Value(int index) {
        return signedInteger32Value_.get(index);
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public Builder setSignedInteger32Value(
          int index, int value) {
        ensureSignedInteger32ValueIsMutable();
        signedInteger32Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public Builder addSignedInteger32Value(int value) {
        ensureSignedInteger32ValueIsMutable();
        signedInteger32Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public Builder addAllSignedInteger32Value(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSignedInteger32ValueIsMutable();
        super.addAll(values, signedInteger32Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 signed_integer32_value = 7 [packed = true];</code>
       */
      public Builder clearSignedInteger32Value() {
        signedInteger32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated sint64 signed_integer64_value = 8 [packed = true];
      private java.util.List<java.lang.Long> signedInteger64Value_ = java.util.Collections.emptyList();
      private void ensureSignedInteger64ValueIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          signedInteger64Value_ = new java.util.ArrayList<java.lang.Long>(signedInteger64Value_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getSignedInteger64ValueList() {
        return java.util.Collections.unmodifiableList(signedInteger64Value_);
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public int getSignedInteger64ValueCount() {
        return signedInteger64Value_.size();
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public long getSignedInteger64Value(int index) {
        return signedInteger64Value_.get(index);
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public Builder setSignedInteger64Value(
          int index, long value) {
        ensureSignedInteger64ValueIsMutable();
        signedInteger64Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public Builder addSignedInteger64Value(long value) {
        ensureSignedInteger64ValueIsMutable();
        signedInteger64Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public Builder addAllSignedInteger64Value(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureSignedInteger64ValueIsMutable();
        super.addAll(values, signedInteger64Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 signed_integer64_value = 8 [packed = true];</code>
       */
      public Builder clearSignedInteger64Value() {
        signedInteger64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated fixed32 fixed_number32_value = 9 [packed = true];
      private java.util.List<java.lang.Integer> fixedNumber32Value_ = java.util.Collections.emptyList();
      private void ensureFixedNumber32ValueIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          fixedNumber32Value_ = new java.util.ArrayList<java.lang.Integer>(fixedNumber32Value_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getFixedNumber32ValueList() {
        return java.util.Collections.unmodifiableList(fixedNumber32Value_);
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public int getFixedNumber32ValueCount() {
        return fixedNumber32Value_.size();
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public int getFixedNumber32Value(int index) {
        return fixedNumber32Value_.get(index);
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public Builder setFixedNumber32Value(
          int index, int value) {
        ensureFixedNumber32ValueIsMutable();
        fixedNumber32Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public Builder addFixedNumber32Value(int value) {
        ensureFixedNumber32ValueIsMutable();
        fixedNumber32Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public Builder addAllFixedNumber32Value(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFixedNumber32ValueIsMutable();
        super.addAll(values, fixedNumber32Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 fixed_number32_value = 9 [packed = true];</code>
       */
      public Builder clearFixedNumber32Value() {
        fixedNumber32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated fixed64 fixed_number64_value = 10 [packed = true];
      private java.util.List<java.lang.Long> fixedNumber64Value_ = java.util.Collections.emptyList();
      private void ensureFixedNumber64ValueIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          fixedNumber64Value_ = new java.util.ArrayList<java.lang.Long>(fixedNumber64Value_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getFixedNumber64ValueList() {
        return java.util.Collections.unmodifiableList(fixedNumber64Value_);
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public int getFixedNumber64ValueCount() {
        return fixedNumber64Value_.size();
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public long getFixedNumber64Value(int index) {
        return fixedNumber64Value_.get(index);
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public Builder setFixedNumber64Value(
          int index, long value) {
        ensureFixedNumber64ValueIsMutable();
        fixedNumber64Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public Builder addFixedNumber64Value(long value) {
        ensureFixedNumber64ValueIsMutable();
        fixedNumber64Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public Builder addAllFixedNumber64Value(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureFixedNumber64ValueIsMutable();
        super.addAll(values, fixedNumber64Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed64 fixed_number64_value = 10 [packed = true];</code>
       */
      public Builder clearFixedNumber64Value() {
        fixedNumber64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];
      private java.util.List<java.lang.Integer> signedFixedNumber32Value_ = java.util.Collections.emptyList();
      private void ensureSignedFixedNumber32ValueIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          signedFixedNumber32Value_ = new java.util.ArrayList<java.lang.Integer>(signedFixedNumber32Value_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getSignedFixedNumber32ValueList() {
        return java.util.Collections.unmodifiableList(signedFixedNumber32Value_);
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public int getSignedFixedNumber32ValueCount() {
        return signedFixedNumber32Value_.size();
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public int getSignedFixedNumber32Value(int index) {
        return signedFixedNumber32Value_.get(index);
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public Builder setSignedFixedNumber32Value(
          int index, int value) {
        ensureSignedFixedNumber32ValueIsMutable();
        signedFixedNumber32Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public Builder addSignedFixedNumber32Value(int value) {
        ensureSignedFixedNumber32ValueIsMutable();
        signedFixedNumber32Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public Builder addAllSignedFixedNumber32Value(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSignedFixedNumber32ValueIsMutable();
        super.addAll(values, signedFixedNumber32Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed32 signed_fixed_number32_value = 11 [packed = true];</code>
       */
      public Builder clearSignedFixedNumber32Value() {
        signedFixedNumber32Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];
      private java.util.List<java.lang.Long> signedFixedNumber64Value_ = java.util.Collections.emptyList();
      private void ensureSignedFixedNumber64ValueIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          signedFixedNumber64Value_ = new java.util.ArrayList<java.lang.Long>(signedFixedNumber64Value_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getSignedFixedNumber64ValueList() {
        return java.util.Collections.unmodifiableList(signedFixedNumber64Value_);
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public int getSignedFixedNumber64ValueCount() {
        return signedFixedNumber64Value_.size();
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public long getSignedFixedNumber64Value(int index) {
        return signedFixedNumber64Value_.get(index);
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public Builder setSignedFixedNumber64Value(
          int index, long value) {
        ensureSignedFixedNumber64ValueIsMutable();
        signedFixedNumber64Value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public Builder addSignedFixedNumber64Value(long value) {
        ensureSignedFixedNumber64ValueIsMutable();
        signedFixedNumber64Value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public Builder addAllSignedFixedNumber64Value(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureSignedFixedNumber64ValueIsMutable();
        super.addAll(values, signedFixedNumber64Value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 signed_fixed_number64_value = 12 [packed = true];</code>
       */
      public Builder clearSignedFixedNumber64Value() {
        signedFixedNumber64Value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated bool boolean_value = 13;
      private java.util.List<java.lang.Boolean> booleanValue_ = java.util.Collections.emptyList();
      private void ensureBooleanValueIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          booleanValue_ = new java.util.ArrayList<java.lang.Boolean>(booleanValue_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public java.util.List<java.lang.Boolean>
          getBooleanValueList() {
        return java.util.Collections.unmodifiableList(booleanValue_);
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public int getBooleanValueCount() {
        return booleanValue_.size();
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public boolean getBooleanValue(int index) {
        return booleanValue_.get(index);
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public Builder setBooleanValue(
          int index, boolean value) {
        ensureBooleanValueIsMutable();
        booleanValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public Builder addBooleanValue(boolean value) {
        ensureBooleanValueIsMutable();
        booleanValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public Builder addAllBooleanValue(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureBooleanValueIsMutable();
        super.addAll(values, booleanValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool boolean_value = 13;</code>
       */
      public Builder clearBooleanValue() {
        booleanValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated string string_value = 14;
      private com.google.protobuf.LazyStringList stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringValueIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          stringValue_ = new com.google.protobuf.LazyStringArrayList(stringValue_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public java.util.List<java.lang.String>
          getStringValueList() {
        return java.util.Collections.unmodifiableList(stringValue_);
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public int getStringValueCount() {
        return stringValue_.size();
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public java.lang.String getStringValue(int index) {
        return stringValue_.get(index);
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes(int index) {
        return stringValue_.getByteString(index);
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public Builder setStringValue(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public Builder addStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public Builder addAllStringValue(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringValueIsMutable();
        super.addAll(values, stringValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public Builder clearStringValue() {
        stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string string_value = 14;</code>
       */
      public Builder addStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.add(value);
        onChanged();
        return this;
      }

      // repeated bytes byte_sequence_value = 15;
      private java.util.List<com.google.protobuf.ByteString> byteSequenceValue_ = java.util.Collections.emptyList();
      private void ensureByteSequenceValueIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          byteSequenceValue_ = new java.util.ArrayList<com.google.protobuf.ByteString>(byteSequenceValue_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getByteSequenceValueList() {
        return java.util.Collections.unmodifiableList(byteSequenceValue_);
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public int getByteSequenceValueCount() {
        return byteSequenceValue_.size();
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public com.google.protobuf.ByteString getByteSequenceValue(int index) {
        return byteSequenceValue_.get(index);
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public Builder setByteSequenceValue(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureByteSequenceValueIsMutable();
        byteSequenceValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public Builder addByteSequenceValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureByteSequenceValueIsMutable();
        byteSequenceValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public Builder addAllByteSequenceValue(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureByteSequenceValueIsMutable();
        super.addAll(values, byteSequenceValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes byte_sequence_value = 15;</code>
       */
      public Builder clearByteSequenceValue() {
        byteSequenceValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:tc.oc.protobuf.packet.protocols.GenericMessage)
    }

    static {
      defaultInstance = new GenericMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:tc.oc.protobuf.packet.protocols.GenericMessage)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nHsrc/test/java/tc/oc/protobuf/packet/pr" +
      "otocols/test_generic_message.proto\022\037tc.o" +
      "c.protobuf.packet.protocols\"\373\003\n\016GenericM" +
      "essage\022\030\n\014double_value\030\001 \003(\001B\002\020\001\022\027\n\013floa" +
      "t_value\030\002 \003(\002B\002\020\001\022\033\n\017integer32_value\030\003 \003" +
      "(\005B\002\020\001\022\033\n\017integer64_value\030\004 \003(\003B\002\020\001\022$\n\030u" +
      "nsigned_integer32_value\030\005 \003(\rB\002\020\001\022$\n\030uns" +
      "igned_integer64_value\030\006 \003(\004B\002\020\001\022\"\n\026signe" +
      "d_integer32_value\030\007 \003(\021B\002\020\001\022\"\n\026signed_in" +
      "teger64_value\030\010 \003(\022B\002\020\001\022 \n\024fixed_number3",
      "2_value\030\t \003(\007B\002\020\001\022 \n\024fixed_number64_valu" +
      "e\030\n \003(\006B\002\020\001\022\'\n\033signed_fixed_number32_val" +
      "ue\030\013 \003(\017B\002\020\001\022\'\n\033signed_fixed_number64_va" +
      "lue\030\014 \003(\020B\002\020\001\022\025\n\rboolean_value\030\r \003(\010\022\024\n\014" +
      "string_value\030\016 \003(\t\022\033\n\023byte_sequence_valu" +
      "e\030\017 \003(\014*\010\010\020\020\200\200\200\200\002B5\n\037tc.oc.protobuf.pack" +
      "et.protocolsB\022TestGenericMessage"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tc_oc_protobuf_packet_protocols_GenericMessage_descriptor,
              new java.lang.String[] { "DoubleValue", "FloatValue", "Integer32Value", "Integer64Value", "UnsignedInteger32Value", "UnsignedInteger64Value", "SignedInteger32Value", "SignedInteger64Value", "FixedNumber32Value", "FixedNumber64Value", "SignedFixedNumber32Value", "SignedFixedNumber64Value", "BooleanValue", "StringValue", "ByteSequenceValue", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
